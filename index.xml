<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tekio</title>
    <link>https://advt3.com/</link>
    <description>Recent content on Tekio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Dec 2019 17:20:01 +0100</lastBuildDate>
    
	<atom:link href="https://advt3.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Finding Lane Lines on the Road</title>
      <link>https://advt3.com/posts/findinglanelines/</link>
      <pubDate>Thu, 27 Aug 2020 11:47:02 +0200</pubDate>
      
      <guid>https://advt3.com/posts/findinglanelines/</guid>
      <description>Introduction This is the first project for the @udacity Nano degree in self-driving car. The goals of this project is to Make a pipeline that finds lane lines on the road.</description>
    </item>
    
    <item>
      <title>Using Cloud instances for your Cuda loads</title>
      <link>https://advt3.com/posts/cloud_gpu/</link>
      <pubDate>Thu, 28 May 2020 10:22:09 +0200</pubDate>
      
      <guid>https://advt3.com/posts/cloud_gpu/</guid>
      <description>Introduction Writing an algorithm employing Cuda does not require a state of the art GPU. However, to reap the benefits of massively parallel processing it is required a powerful one.</description>
    </item>
    
    <item>
      <title>Benchmarking OpenCV with Cuda implementation</title>
      <link>https://advt3.com/posts/benchmarking_opencv_cuda/</link>
      <pubDate>Mon, 18 May 2020 14:39:55 +0200</pubDate>
      
      <guid>https://advt3.com/posts/benchmarking_opencv_cuda/</guid>
      <description>How do I know my software is efficient and performant? How should it be measured? There is a myriad of tools to measure performance and KPIs, so where to start?</description>
    </item>
    
    <item>
      <title>Development environment on Ubuntu 20.04 LTS</title>
      <link>https://advt3.com/posts/development_environment/</link>
      <pubDate>Mon, 27 Apr 2020 00:30:32 +0100</pubDate>
      
      <guid>https://advt3.com/posts/development_environment/</guid>
      <description>Introduction Having proper foundations in software usually translates on having a software project easy to extend and faster to develop. On its core, software engineering provides tools to improve: Business Value, Code Quality, and Process Predictability (Our primary focus).</description>
    </item>
    
    <item>
      <title>Building a Crossplatform Cuda application</title>
      <link>https://advt3.com/posts/running_cuda_cpp_python/</link>
      <pubDate>Sat, 01 Feb 2020 14:07:00 +0100</pubDate>
      
      <guid>https://advt3.com/posts/running_cuda_cpp_python/</guid>
      <description>Following our Essential environment setup, We implement our first C++ and Cuda application modules. We describe on this post the steps needed to build and integrate the Cuda system with C++ and Python using CMake.</description>
    </item>
    
    <item>
      <title>References</title>
      <link>https://advt3.com/references/</link>
      <pubDate>Wed, 25 Dec 2019 17:20:01 +0100</pubDate>
      
      <guid>https://advt3.com/references/</guid>
      <description>Nvidia  https://developer.nvidia.com/opencl https://developer.nvidia.com/cuda-gpus#compute https://courses.nvidia.com/courses/course-v1:DLI+A-AC-00+V1/about https://devblogs.nvidia.com/building-cuda-applications-cmake/  Cloud  https://aws.amazon.com/ec2/instance-types/p2/  Courses  https://www.pluralsight.com/courses/parallel-computing-cuda  Books  CMake Cookbock Cuda by example  </description>
    </item>
    
    <item>
      <title>Getting started with accelerated computing</title>
      <link>https://advt3.com/posts/getting_started/</link>
      <pubDate>Sun, 08 Dec 2019 11:55:27 +0100</pubDate>
      
      <guid>https://advt3.com/posts/getting_started/</guid>
      <description>Utilizing GPUs for general computing is not new. Today, several frameworks enable developers to obtain the advantages of SIMT (Single instruction, multiple threads) architectures, such as OpenCL, OpenMP, OpenACC, or even Metal on OSx and CUDA.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://advt3.com/posts/introduction/</link>
      <pubDate>Sat, 30 Nov 2019 22:51:04 +0100</pubDate>
      
      <guid>https://advt3.com/posts/introduction/</guid>
      <description>Nowadays, resource-intensive tasks are necessary for a variety of areas such as image, signal processing, IoT, or Machine learning. Executing such tasks efficiently (watts per flops) has become a priority, not only for edge computing but also for data centers.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://advt3.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://advt3.com/about/</guid>
      <description>Santiago Hurtado Linux engineer since 2001 and an MSc in Systems and Computing Engineering since 2011. Currently, developing flexible and efficient Linux systems to be deployed on the field in tough conditions.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://advt3.com/currentprojects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://advt3.com/currentprojects/</guid>
      <description>Current Projects Tekio Platform #ComputerVision #HighPerformance #EmbbededLinuxSoftware
Accelerated Internet of things platform with distributed processing and machine learning usage
 CUDA Research and its usage of OpenCV Distributed processing using MQTT, Dockers, Cuda, OpenCV and Tensorflow with Python and C++  Lingen, Germany</description>
    </item>
    
    <item>
      <title></title>
      <link>https://advt3.com/earlierprojects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://advt3.com/earlierprojects/</guid>
      <description>Earlier Projects  Tekio Self-adaptive Middleware #ComputerVision #SoftwareArchictecture
A self-adaptive middleware platform to dynamically compose legacy software behavior of Computer Vision Algorithms.</description>
    </item>
    
  </channel>
</rss>